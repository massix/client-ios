// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#ifndef PROTOBUF_controller_2eproto__INCLUDED
#define PROTOBUF_controller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace orwell {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_controller_2eproto();
void protobuf_AssignDesc_controller_2eproto();
void protobuf_ShutdownFile_controller_2eproto();

class Hello;
class Input;
class Input_Move;
class Input_Fire;

// ===================================================================

class Hello : public ::google_public::protobuf::MessageLite {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }

  static const Hello& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Hello* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Hello* other);

  // implements Message ----------------------------------------------

  Hello* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool ready = 2 [default = true];
  inline bool has_ready() const;
  inline void clear_ready();
  static const int kReadyFieldNumber = 2;
  inline bool ready() const;
  inline void set_ready(bool value);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google_public::protobuf::uint32 port() const;
  inline void set_port(::google_public::protobuf::uint32 value);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:orwell.messages.Hello)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ready();
  inline void clear_has_ready();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::std::string* name_;
  bool ready_;
  ::google_public::protobuf::uint32 port_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_controller_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_controller_2eproto();
  #endif
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static Hello* default_instance_;
};
// -------------------------------------------------------------------

class Input_Move : public ::google_public::protobuf::MessageLite {
 public:
  Input_Move();
  virtual ~Input_Move();

  Input_Move(const Input_Move& from);

  inline Input_Move& operator=(const Input_Move& from) {
    CopyFrom(from);
    return *this;
  }

  static const Input_Move& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Input_Move* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Input_Move* other);

  // implements Message ----------------------------------------------

  Input_Move* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const Input_Move& from);
  void MergeFrom(const Input_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline double left() const;
  inline void set_left(double value);

  // optional double right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline double right() const;
  inline void set_right(double value);

  // @@protoc_insertion_point(class_scope:orwell.messages.Input.Move)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();

  double left_;
  double right_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_controller_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_controller_2eproto();
  #endif
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static Input_Move* default_instance_;
};
// -------------------------------------------------------------------

class Input_Fire : public ::google_public::protobuf::MessageLite {
 public:
  Input_Fire();
  virtual ~Input_Fire();

  Input_Fire(const Input_Fire& from);

  inline Input_Fire& operator=(const Input_Fire& from) {
    CopyFrom(from);
    return *this;
  }

  static const Input_Fire& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Input_Fire* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Input_Fire* other);

  // implements Message ----------------------------------------------

  Input_Fire* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const Input_Fire& from);
  void MergeFrom(const Input_Fire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool weapon1 = 1;
  inline bool has_weapon1() const;
  inline void clear_weapon1();
  static const int kWeapon1FieldNumber = 1;
  inline bool weapon1() const;
  inline void set_weapon1(bool value);

  // optional bool weapon2 = 2;
  inline bool has_weapon2() const;
  inline void clear_weapon2();
  static const int kWeapon2FieldNumber = 2;
  inline bool weapon2() const;
  inline void set_weapon2(bool value);

  // @@protoc_insertion_point(class_scope:orwell.messages.Input.Fire)
 private:
  inline void set_has_weapon1();
  inline void clear_has_weapon1();
  inline void set_has_weapon2();
  inline void clear_has_weapon2();

  bool weapon1_;
  bool weapon2_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_controller_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_controller_2eproto();
  #endif
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static Input_Fire* default_instance_;
};
// -------------------------------------------------------------------

class Input : public ::google_public::protobuf::MessageLite {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }

  static const Input& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Input* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Input* other);

  // implements Message ----------------------------------------------

  Input* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Input_Move Move;
  typedef Input_Fire Fire;

  // accessors -------------------------------------------------------

  // optional group Move = 1 {
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 1;
  inline const ::orwell::messages::Input_Move& move() const;
  inline ::orwell::messages::Input_Move* mutable_move();
  inline ::orwell::messages::Input_Move* release_move();
  inline void set_allocated_move(::orwell::messages::Input_Move* move);

  // optional group Fire = 2 {
  inline bool has_fire() const;
  inline void clear_fire();
  static const int kFireFieldNumber = 2;
  inline const ::orwell::messages::Input_Fire& fire() const;
  inline ::orwell::messages::Input_Fire* mutable_fire();
  inline ::orwell::messages::Input_Fire* release_fire();
  inline void set_allocated_fire(::orwell::messages::Input_Fire* fire);

  // @@protoc_insertion_point(class_scope:orwell.messages.Input)
 private:
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_fire();
  inline void clear_has_fire();

  ::orwell::messages::Input_Move* move_;
  ::orwell::messages::Input_Fire* fire_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_controller_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_controller_2eproto();
  #endif
  friend void protobuf_AssignDesc_controller_2eproto();
  friend void protobuf_ShutdownFile_controller_2eproto();

  void InitAsDefaultInstance();
  static Input* default_instance_;
};
// ===================================================================


// ===================================================================

// Hello

// required string name = 1;
inline bool Hello::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hello::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hello::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hello::clear_name() {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Hello::name() const {
  return *name_;
}
inline void Hello::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Hello::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Hello::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Hello::mutable_name() {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Hello::release_name() {
  clear_has_name();
  if (name_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Hello::set_allocated_name(::std::string* name) {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// optional bool ready = 2 [default = true];
inline bool Hello::has_ready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hello::set_has_ready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hello::clear_has_ready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hello::clear_ready() {
  ready_ = true;
  clear_has_ready();
}
inline bool Hello::ready() const {
  return ready_;
}
inline void Hello::set_ready(bool value) {
  set_has_ready();
  ready_ = value;
}

// required uint32 port = 3;
inline bool Hello::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hello::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Hello::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Hello::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google_public::protobuf::uint32 Hello::port() const {
  return port_;
}
inline void Hello::set_port(::google_public::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required string ip = 4;
inline bool Hello::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Hello::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Hello::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Hello::clear_ip() {
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Hello::ip() const {
  return *ip_;
}
inline void Hello::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Hello::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Hello::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Hello::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Hello::release_ip() {
  clear_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Hello::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Input_Move

// optional double left = 1;
inline bool Input_Move::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Input_Move::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Input_Move::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Input_Move::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline double Input_Move::left() const {
  return left_;
}
inline void Input_Move::set_left(double value) {
  set_has_left();
  left_ = value;
}

// optional double right = 2;
inline bool Input_Move::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Input_Move::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Input_Move::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Input_Move::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline double Input_Move::right() const {
  return right_;
}
inline void Input_Move::set_right(double value) {
  set_has_right();
  right_ = value;
}

// -------------------------------------------------------------------

// Input_Fire

// optional bool weapon1 = 1;
inline bool Input_Fire::has_weapon1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Input_Fire::set_has_weapon1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Input_Fire::clear_has_weapon1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Input_Fire::clear_weapon1() {
  weapon1_ = false;
  clear_has_weapon1();
}
inline bool Input_Fire::weapon1() const {
  return weapon1_;
}
inline void Input_Fire::set_weapon1(bool value) {
  set_has_weapon1();
  weapon1_ = value;
}

// optional bool weapon2 = 2;
inline bool Input_Fire::has_weapon2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Input_Fire::set_has_weapon2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Input_Fire::clear_has_weapon2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Input_Fire::clear_weapon2() {
  weapon2_ = false;
  clear_has_weapon2();
}
inline bool Input_Fire::weapon2() const {
  return weapon2_;
}
inline void Input_Fire::set_weapon2(bool value) {
  set_has_weapon2();
  weapon2_ = value;
}

// -------------------------------------------------------------------

// Input

// optional group Move = 1 {
inline bool Input::has_move() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Input::set_has_move() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Input::clear_has_move() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Input::clear_move() {
  if (move_ != NULL) move_->::orwell::messages::Input_Move::Clear();
  clear_has_move();
}
inline const ::orwell::messages::Input_Move& Input::move() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return move_ != NULL ? *move_ : *default_instance().move_;
#else
  return move_ != NULL ? *move_ : *default_instance_->move_;
#endif
}
inline ::orwell::messages::Input_Move* Input::mutable_move() {
  set_has_move();
  if (move_ == NULL) move_ = new ::orwell::messages::Input_Move;
  return move_;
}
inline ::orwell::messages::Input_Move* Input::release_move() {
  clear_has_move();
  ::orwell::messages::Input_Move* temp = move_;
  move_ = NULL;
  return temp;
}
inline void Input::set_allocated_move(::orwell::messages::Input_Move* move) {
  delete move_;
  move_ = move;
  if (move) {
    set_has_move();
  } else {
    clear_has_move();
  }
}

// optional group Fire = 2 {
inline bool Input::has_fire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Input::set_has_fire() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Input::clear_has_fire() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Input::clear_fire() {
  if (fire_ != NULL) fire_->::orwell::messages::Input_Fire::Clear();
  clear_has_fire();
}
inline const ::orwell::messages::Input_Fire& Input::fire() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return fire_ != NULL ? *fire_ : *default_instance().fire_;
#else
  return fire_ != NULL ? *fire_ : *default_instance_->fire_;
#endif
}
inline ::orwell::messages::Input_Fire* Input::mutable_fire() {
  set_has_fire();
  if (fire_ == NULL) fire_ = new ::orwell::messages::Input_Fire;
  return fire_;
}
inline ::orwell::messages::Input_Fire* Input::release_fire() {
  clear_has_fire();
  ::orwell::messages::Input_Fire* temp = fire_;
  fire_ = NULL;
  return temp;
}
inline void Input::set_allocated_fire(::orwell::messages::Input_Fire* fire) {
  delete fire_;
  fire_ = fire;
  if (fire) {
    set_has_fire();
  } else {
    clear_has_fire();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace orwell

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_controller_2eproto__INCLUDED
