// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server-game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server-game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace orwell {
namespace messages {

void protobuf_ShutdownFile_server_2dgame_2eproto() {
  delete Team::default_instance_;
  delete GameState::default_instance_;
  delete Welcome::default_instance_;
  delete Goodbye::default_instance_;
  delete Access::default_instance_;
  delete GiveVideo::default_instance_;
  delete Start::default_instance_;
  delete Stop::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_server_2dgame_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_server_2dgame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Team::default_instance_ = new Team();
  GameState::default_instance_ = new GameState();
  Welcome::default_instance_ = new Welcome();
  Goodbye::default_instance_ = new Goodbye();
  Access::default_instance_ = new Access();
  GiveVideo::default_instance_ = new GiveVideo();
  Start::default_instance_ = new Start();
  Stop::default_instance_ = new Stop();
  Team::default_instance_->InitAsDefaultInstance();
  GameState::default_instance_->InitAsDefaultInstance();
  Welcome::default_instance_->InitAsDefaultInstance();
  Goodbye::default_instance_->InitAsDefaultInstance();
  Access::default_instance_->InitAsDefaultInstance();
  GiveVideo::default_instance_->InitAsDefaultInstance();
  Start::default_instance_->InitAsDefaultInstance();
  Stop::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2dgame_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_server_2dgame_2eproto_once_);
void protobuf_AddDesc_server_2dgame_2eproto() {
  ::google_public::protobuf::::google_public::protobuf::GoogleOnceInit(&protobuf_AddDesc_server_2dgame_2eproto_once_,
                 &protobuf_AddDesc_server_2dgame_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2dgame_2eproto {
  StaticDescriptorInitializer_server_2dgame_2eproto() {
    protobuf_AddDesc_server_2dgame_2eproto();
  }
} static_descriptor_initializer_server_2dgame_2eproto_;
#endif
bool EnumTeam_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Team::kScoreFieldNumber;
const int Team::kNumPlayersFieldNumber;
const int Team::kPlayersFieldNumber;
#endif  // !_MSC_VER

Team::Team()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Team::InitAsDefaultInstance() {
}

Team::Team(const Team& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Team::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  num_players_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team::~Team() {
  SharedDtor();
}

void Team::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Team& Team::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

Team* Team::default_instance_ = NULL;

Team* Team::New() const {
  return new Team;
}

void Team::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    num_players_ = 0u;
  }
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Team::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint32, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_players;
        break;
      }

      // optional uint32 num_players = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_players:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint32, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_players_)));
          set_has_num_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated string players = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 score = 1;
  if (has_score()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 num_players = 2;
  if (has_num_players()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_players(), output);
  }

  // repeated string players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->players(i), output);
  }

}

int Team::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 num_players = 2;
    if (has_num_players()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_players());
    }

  }
  // repeated string players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Team*>(&from));
}

void Team::MergeFrom(const Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_num_players()) {
      set_num_players(from.num_players());
    }
  }
}

void Team::CopyFrom(const Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {

  return true;
}

void Team::Swap(Team* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(num_players_, other->num_players_);
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Team::GetTypeName() const {
  return "orwell.messages.Team";
}


// ===================================================================

#ifndef _MSC_VER
const int GameState::kPlayingFieldNumber;
const int GameState::kSecondsFieldNumber;
const int GameState::kBluFieldNumber;
const int GameState::kRedFieldNumber;
const int GameState::kWinnerFieldNumber;
#endif  // !_MSC_VER

GameState::GameState()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void GameState::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  blu_ = const_cast< ::orwell::messages::Team*>(
      ::orwell::messages::Team::internal_default_instance());
#else
  blu_ = const_cast< ::orwell::messages::Team*>(&::orwell::messages::Team::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  red_ = const_cast< ::orwell::messages::Team*>(
      ::orwell::messages::Team::internal_default_instance());
#else
  red_ = const_cast< ::orwell::messages::Team*>(&::orwell::messages::Team::default_instance());
#endif
}

GameState::GameState(const GameState& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GameState::SharedCtor() {
  _cached_size_ = 0;
  playing_ = false;
  seconds_ = GOOGLE_ULONGLONG(0);
  blu_ = NULL;
  red_ = NULL;
  winner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  SharedDtor();
}

void GameState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete blu_;
    delete red_;
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GameState& GameState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New() const {
  return new GameState;
}

void GameState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playing_ = false;
    seconds_ = GOOGLE_ULONGLONG(0);
    if (has_blu()) {
      if (blu_ != NULL) blu_->::orwell::messages::Team::Clear();
    }
    if (has_red()) {
      if (red_ != NULL) red_->::orwell::messages::Team::Clear();
    }
    winner_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GameState::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool playing = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_GBOOL>(
                 input, &playing_)));
          set_has_playing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seconds;
        break;
      }

      // optional uint64 seconds = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seconds:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint64, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seconds_)));
          set_has_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blu;
        break;
      }

      // optional .orwell.messages.Team blu = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blu:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_red;
        break;
      }

      // optional .orwell.messages.Team red = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winner;
        break;
      }

      // optional .orwell.messages.EnumTeam winner = 5;
      case 5: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::orwell::messages::EnumTeam_IsValid(value)) {
            set_winner(static_cast< ::orwell::messages::EnumTeam >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required bool playing = 1;
  if (has_playing()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->playing(), output);
  }

  // optional uint64 seconds = 2;
  if (has_seconds()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt64(2, this->seconds(), output);
  }

  // optional .orwell.messages.Team blu = 3;
  if (has_blu()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->blu(), output);
  }

  // optional .orwell.messages.Team red = 4;
  if (has_red()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->red(), output);
  }

  // optional .orwell.messages.EnumTeam winner = 5;
  if (has_winner()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->winner(), output);
  }

}

int GameState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool playing = 1;
    if (has_playing()) {
      total_size += 1 + 1;
    }

    // optional uint64 seconds = 2;
    if (has_seconds()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt64Size(
          this->seconds());
    }

    // optional .orwell.messages.Team blu = 3;
    if (has_blu()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blu());
    }

    // optional .orwell.messages.Team red = 4;
    if (has_red()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->red());
    }

    // optional .orwell.messages.EnumTeam winner = 5;
    if (has_winner()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->winner());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const GameState*>(&from));
}

void GameState::MergeFrom(const GameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playing()) {
      set_playing(from.playing());
    }
    if (from.has_seconds()) {
      set_seconds(from.seconds());
    }
    if (from.has_blu()) {
      mutable_blu()->::orwell::messages::Team::MergeFrom(from.blu());
    }
    if (from.has_red()) {
      mutable_red()->::orwell::messages::Team::MergeFrom(from.red());
    }
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
}

void GameState::CopyFrom(const GameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameState::Swap(GameState* other) {
  if (other != this) {
    std::swap(playing_, other->playing_);
    std::swap(seconds_, other->seconds_);
    std::swap(blu_, other->blu_);
    std::swap(red_, other->red_);
    std::swap(winner_, other->winner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GameState::GetTypeName() const {
  return "orwell.messages.GameState";
}


// ===================================================================

#ifndef _MSC_VER
const int Welcome::kRobotFieldNumber;
const int Welcome::kTeamFieldNumber;
const int Welcome::kGameStateFieldNumber;
#endif  // !_MSC_VER

Welcome::Welcome()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Welcome::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  game_state_ = const_cast< ::orwell::messages::GameState*>(
      ::orwell::messages::GameState::internal_default_instance());
#else
  game_state_ = const_cast< ::orwell::messages::GameState*>(&::orwell::messages::GameState::default_instance());
#endif
}

Welcome::Welcome(const Welcome& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Welcome::SharedCtor() {
  _cached_size_ = 0;
  robot_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  team_ = 0;
  game_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Welcome::~Welcome() {
  SharedDtor();
}

void Welcome::SharedDtor() {
  if (robot_ != &::google_public::protobuf::internal::kEmptyString) {
    delete robot_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete game_state_;
  }
}

void Welcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Welcome& Welcome::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

Welcome* Welcome::default_instance_ = NULL;

Welcome* Welcome::New() const {
  return new Welcome;
}

void Welcome::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_robot()) {
      if (robot_ != &::google_public::protobuf::internal::kEmptyString) {
        robot_->clear();
      }
    }
    team_ = 0;
    if (has_game_state()) {
      if (game_state_ != NULL) game_state_->::orwell::messages::GameState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Welcome::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string robot = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }

      // required .orwell.messages.EnumTeam team = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team:
          int value;
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google_public::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::orwell::messages::EnumTeam_IsValid(value)) {
            set_team(static_cast< ::orwell::messages::EnumTeam >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_game_state;
        break;
      }

      // optional .orwell.messages.GameState game_state = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_state:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Welcome::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string robot = 1;
  if (has_robot()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->robot(), output);
  }

  // required .orwell.messages.EnumTeam team = 2;
  if (has_team()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team(), output);
  }

  // optional .orwell.messages.GameState game_state = 3;
  if (has_game_state()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->game_state(), output);
  }

}

int Welcome::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string robot = 1;
    if (has_robot()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->robot());
    }

    // required .orwell.messages.EnumTeam team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional .orwell.messages.GameState game_state = 3;
    if (has_game_state()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Welcome::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Welcome*>(&from));
}

void Welcome::MergeFrom(const Welcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot()) {
      set_robot(from.robot());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
    if (from.has_game_state()) {
      mutable_game_state()->::orwell::messages::GameState::MergeFrom(from.game_state());
    }
  }
}

void Welcome::CopyFrom(const Welcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Welcome::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_game_state()) {
    if (!this->game_state().IsInitialized()) return false;
  }
  return true;
}

void Welcome::Swap(Welcome* other) {
  if (other != this) {
    std::swap(robot_, other->robot_);
    std::swap(team_, other->team_);
    std::swap(game_state_, other->game_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Welcome::GetTypeName() const {
  return "orwell.messages.Welcome";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Goodbye::Goodbye()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Goodbye::InitAsDefaultInstance() {
}

Goodbye::Goodbye(const Goodbye& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Goodbye::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Goodbye::~Goodbye() {
  SharedDtor();
}

void Goodbye::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Goodbye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Goodbye& Goodbye::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

Goodbye* Goodbye::default_instance_ = NULL;

Goodbye* Goodbye::New() const {
  return new Goodbye;
}

void Goodbye::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Goodbye::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void Goodbye::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
}

int Goodbye::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Goodbye::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Goodbye*>(&from));
}

void Goodbye::MergeFrom(const Goodbye& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void Goodbye::CopyFrom(const Goodbye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Goodbye::IsInitialized() const {

  return true;
}

void Goodbye::Swap(Goodbye* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Goodbye::GetTypeName() const {
  return "orwell.messages.Goodbye";
}


// ===================================================================

#ifndef _MSC_VER
const int Access::kPortFieldNumber;
const int Access::kIpFieldNumber;
#endif  // !_MSC_VER

Access::Access()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Access::InitAsDefaultInstance() {
}

Access::Access(const Access& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Access::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Access::~Access() {
  SharedDtor();
}

void Access::SharedDtor() {
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Access::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Access& Access::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

Access* Access::default_instance_ = NULL;

Access* Access::New() const {
  return new Access;
}

void Access::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Access::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 port = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint32, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2 [default = ""];
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Access::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required uint32 port = 1;
  if (has_port()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // optional string ip = 2 [default = ""];
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

}

int Access::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string ip = 2 [default = ""];
    if (has_ip()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Access::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Access*>(&from));
}

void Access::MergeFrom(const Access& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
}

void Access::CopyFrom(const Access& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Access::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Access::Swap(Access* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Access::GetTypeName() const {
  return "orwell.messages.Access";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GiveVideo::GiveVideo()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void GiveVideo::InitAsDefaultInstance() {
}

GiveVideo::GiveVideo(const GiveVideo& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiveVideo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveVideo::~GiveVideo() {
  SharedDtor();
}

void GiveVideo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiveVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiveVideo& GiveVideo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

GiveVideo* GiveVideo::default_instance_ = NULL;

GiveVideo* GiveVideo::New() const {
  return new GiveVideo;
}

void GiveVideo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiveVideo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void GiveVideo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
}

int GiveVideo::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveVideo::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const GiveVideo*>(&from));
}

void GiveVideo::MergeFrom(const GiveVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void GiveVideo::CopyFrom(const GiveVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveVideo::IsInitialized() const {

  return true;
}

void GiveVideo::Swap(GiveVideo* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiveVideo::GetTypeName() const {
  return "orwell.messages.GiveVideo";
}


// ===================================================================

#ifndef _MSC_VER
const int Start::kGameStateFieldNumber;
#endif  // !_MSC_VER

Start::Start()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Start::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  game_state_ = const_cast< ::orwell::messages::GameState*>(
      ::orwell::messages::GameState::internal_default_instance());
#else
  game_state_ = const_cast< ::orwell::messages::GameState*>(&::orwell::messages::GameState::default_instance());
#endif
}

Start::Start(const Start& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Start::SharedCtor() {
  _cached_size_ = 0;
  game_state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Start::~Start() {
  SharedDtor();
}

void Start::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete game_state_;
  }
}

void Start::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Start& Start::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

Start* Start::default_instance_ = NULL;

Start* Start::New() const {
  return new Start;
}

void Start::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_state()) {
      if (game_state_ != NULL) game_state_->::orwell::messages::GameState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Start::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .orwell.messages.GameState game_state = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Start::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional .orwell.messages.GameState game_state = 1;
  if (has_game_state()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->game_state(), output);
  }

}

int Start::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .orwell.messages.GameState game_state = 1;
    if (has_game_state()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Start::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Start*>(&from));
}

void Start::MergeFrom(const Start& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_state()) {
      mutable_game_state()->::orwell::messages::GameState::MergeFrom(from.game_state());
    }
  }
}

void Start::CopyFrom(const Start& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Start::IsInitialized() const {

  if (has_game_state()) {
    if (!this->game_state().IsInitialized()) return false;
  }
  return true;
}

void Start::Swap(Start* other) {
  if (other != this) {
    std::swap(game_state_, other->game_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Start::GetTypeName() const {
  return "orwell.messages.Start";
}


// ===================================================================

#ifndef _MSC_VER
const int Stop::kShutdownFieldNumber;
const int Stop::kVideoFieldNumber;
#endif  // !_MSC_VER

Stop::Stop()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Stop::InitAsDefaultInstance() {
}

Stop::Stop(const Stop& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Stop::SharedCtor() {
  _cached_size_ = 0;
  shutdown_ = false;
  video_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stop::~Stop() {
  SharedDtor();
}

void Stop::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Stop& Stop::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dgame_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dgame_2eproto();
#endif
  return *default_instance_;
}

Stop* Stop::default_instance_ = NULL;

Stop* Stop::New() const {
  return new Stop;
}

void Stop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shutdown_ = false;
    video_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Stop::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool shutdown = 1 [default = false];
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_GBOOL>(
                 input, &shutdown_)));
          set_has_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_video;
        break;
      }

      // optional bool video = 2 [default = true];
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_video:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_GBOOL>(
                 input, &video_)));
          set_has_video();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stop::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional bool shutdown = 1 [default = false];
  if (has_shutdown()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->shutdown(), output);
  }

  // optional bool video = 2 [default = true];
  if (has_video()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->video(), output);
  }

}

int Stop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool shutdown = 1 [default = false];
    if (has_shutdown()) {
      total_size += 1 + 1;
    }

    // optional bool video = 2 [default = true];
    if (has_video()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stop::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Stop*>(&from));
}

void Stop::MergeFrom(const Stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shutdown()) {
      set_shutdown(from.shutdown());
    }
    if (from.has_video()) {
      set_video(from.video());
    }
  }
}

void Stop::CopyFrom(const Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {

  return true;
}

void Stop::Swap(Stop* other) {
  if (other != this) {
    std::swap(shutdown_, other->shutdown_);
    std::swap(video_, other->video_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Stop::GetTypeName() const {
  return "orwell.messages.Stop";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace orwell

// @@protoc_insertion_point(global_scope)
