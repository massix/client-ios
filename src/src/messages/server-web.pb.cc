// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server-web.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server-web.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace orwell {
namespace messages {

void protobuf_ShutdownFile_server_2dweb_2eproto() {
  delete GetAccess::default_instance_;
  delete GetGameState::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_server_2dweb_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_server_2dweb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GetAccess::default_instance_ = new GetAccess();
  GetGameState::default_instance_ = new GetGameState();
  GetAccess::default_instance_->InitAsDefaultInstance();
  GetGameState::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2dweb_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_server_2dweb_2eproto_once_);
void protobuf_AddDesc_server_2dweb_2eproto() {
  ::google_public::protobuf::::google_public::protobuf::GoogleOnceInit(&protobuf_AddDesc_server_2dweb_2eproto_once_,
                 &protobuf_AddDesc_server_2dweb_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2dweb_2eproto {
  StaticDescriptorInitializer_server_2dweb_2eproto() {
    protobuf_AddDesc_server_2dweb_2eproto();
  }
} static_descriptor_initializer_server_2dweb_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GetAccess::kNameFieldNumber;
#endif  // !_MSC_VER

GetAccess::GetAccess()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void GetAccess::InitAsDefaultInstance() {
}

GetAccess::GetAccess(const GetAccess& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetAccess::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAccess::~GetAccess() {
  SharedDtor();
}

void GetAccess::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetAccess& GetAccess::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dweb_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dweb_2eproto();
#endif
  return *default_instance_;
}

GetAccess* GetAccess::default_instance_ = NULL;

GetAccess* GetAccess::New() const {
  return new GetAccess;
}

void GetAccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetAccess::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAccess::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

}

int GetAccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAccess::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const GetAccess*>(&from));
}

void GetAccess::MergeFrom(const GetAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void GetAccess::CopyFrom(const GetAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccess::IsInitialized() const {

  return true;
}

void GetAccess::Swap(GetAccess* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetAccess::GetTypeName() const {
  return "orwell.messages.GetAccess";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetGameState::GetGameState()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void GetGameState::InitAsDefaultInstance() {
}

GetGameState::GetGameState(const GetGameState& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetGameState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetGameState::~GetGameState() {
  SharedDtor();
}

void GetGameState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetGameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetGameState& GetGameState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_server_2dweb_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_server_2dweb_2eproto();
#endif
  return *default_instance_;
}

GetGameState* GetGameState::default_instance_ = NULL;

GetGameState* GetGameState::New() const {
  return new GetGameState;
}

void GetGameState::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetGameState::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void GetGameState::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
}

int GetGameState::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGameState::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const GetGameState*>(&from));
}

void GetGameState::MergeFrom(const GetGameState& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void GetGameState::CopyFrom(const GetGameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGameState::IsInitialized() const {

  return true;
}

void GetGameState::Swap(GetGameState* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetGameState::GetTypeName() const {
  return "orwell.messages.GetGameState";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace orwell

// @@protoc_insertion_point(global_scope)
