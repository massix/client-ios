// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace orwell {
namespace messages {

void protobuf_ShutdownFile_robot_2eproto() {
  delete RobotState::default_instance_;
  delete RobotState_Move::default_instance_;
  delete Video::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_robot_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_robot_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RobotState::default_instance_ = new RobotState();
  RobotState_Move::default_instance_ = new RobotState_Move();
  Video::default_instance_ = new Video();
  RobotState::default_instance_->InitAsDefaultInstance();
  RobotState_Move::default_instance_->InitAsDefaultInstance();
  Video::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robot_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_robot_2eproto_once_);
void protobuf_AddDesc_robot_2eproto() {
  ::google_public::protobuf::::google_public::protobuf::GoogleOnceInit(&protobuf_AddDesc_robot_2eproto_once_,
                 &protobuf_AddDesc_robot_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robot_2eproto {
  StaticDescriptorInitializer_robot_2eproto() {
    protobuf_AddDesc_robot_2eproto();
  }
} static_descriptor_initializer_robot_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RobotState_Move::kLeftFieldNumber;
const int RobotState_Move::kRightFieldNumber;
#endif  // !_MSC_VER

RobotState_Move::RobotState_Move()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void RobotState_Move::InitAsDefaultInstance() {
}

RobotState_Move::RobotState_Move(const RobotState_Move& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RobotState_Move::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotState_Move::~RobotState_Move() {
  SharedDtor();
}

void RobotState_Move::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RobotState_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RobotState_Move& RobotState_Move::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_robot_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
#endif
  return *default_instance_;
}

RobotState_Move* RobotState_Move::default_instance_ = NULL;

RobotState_Move* RobotState_Move::New() const {
  return new RobotState_Move;
}

void RobotState_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RobotState_Move::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double left = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google_public::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_right;
        break;
      }

      // optional double right = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_right:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google_public::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotState_Move::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional double left = 1;
  if (has_left()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteDouble(1, this->left(), output);
  }

  // optional double right = 2;
  if (has_right()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteDouble(2, this->right(), output);
  }

}

int RobotState_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double left = 1;
    if (has_left()) {
      total_size += 1 + 8;
    }

    // optional double right = 2;
    if (has_right()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotState_Move::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const RobotState_Move*>(&from));
}

void RobotState_Move::MergeFrom(const RobotState_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
}

void RobotState_Move::CopyFrom(const RobotState_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState_Move::IsInitialized() const {

  return true;
}

void RobotState_Move::Swap(RobotState_Move* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RobotState_Move::GetTypeName() const {
  return "orwell.messages.RobotState.Move";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RobotState::kLifeFieldNumber;
const int RobotState::kMoveFieldNumber;
const int RobotState::kActiveFieldNumber;
#endif  // !_MSC_VER

RobotState::RobotState()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void RobotState::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  move_ = const_cast< ::orwell::messages::RobotState_Move*>(
      ::orwell::messages::RobotState_Move::internal_default_instance());
#else
  move_ = const_cast< ::orwell::messages::RobotState_Move*>(&::orwell::messages::RobotState_Move::default_instance());
#endif
}

RobotState::RobotState(const RobotState& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RobotState::SharedCtor() {
  _cached_size_ = 0;
  life_ = 0;
  move_ = NULL;
  active_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotState::~RobotState() {
  SharedDtor();
}

void RobotState::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete move_;
  }
}

void RobotState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RobotState& RobotState::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_robot_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
#endif
  return *default_instance_;
}

RobotState* RobotState::default_instance_ = NULL;

RobotState* RobotState::New() const {
  return new RobotState;
}

void RobotState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    life_ = 0;
    if (has_move()) {
      if (move_ != NULL) move_->::orwell::messages::RobotState_Move::Clear();
    }
    active_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RobotState::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double life = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google_public::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_move;
        break;
      }

      // optional group Move = 2 {
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_move:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, mutable_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3 [default = true];
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RobotState::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional double life = 1;
  if (has_life()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteDouble(1, this->life(), output);
  }

  // optional group Move = 2 {
  if (has_move()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteGroup(
      2, this->move(), output);
  }

  // optional bool active = 3 [default = true];
  if (has_active()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

}

int RobotState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double life = 1;
    if (has_life()) {
      total_size += 1 + 8;
    }

    // optional group Move = 2 {
    if (has_move()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->move());
    }

    // optional bool active = 3 [default = true];
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotState::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const RobotState*>(&from));
}

void RobotState::MergeFrom(const RobotState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_life()) {
      set_life(from.life());
    }
    if (from.has_move()) {
      mutable_move()->::orwell::messages::RobotState_Move::MergeFrom(from.move());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
}

void RobotState::CopyFrom(const RobotState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {

  return true;
}

void RobotState::Swap(RobotState* other) {
  if (other != this) {
    std::swap(life_, other->life_);
    std::swap(move_, other->move_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RobotState::GetTypeName() const {
  return "orwell.messages.RobotState";
}


// ===================================================================

#ifndef _MSC_VER
const int Video::kPortFieldNumber;
const int Video::kIpFieldNumber;
#endif  // !_MSC_VER

Video::Video()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Video::InitAsDefaultInstance() {
}

Video::Video(const Video& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Video::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Video::~Video() {
  SharedDtor();
}

void Video::SharedDtor() {
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Video& Video::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_robot_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_robot_2eproto();
#endif
  return *default_instance_;
}

Video* Video::default_instance_ = NULL;

Video* Video::New() const {
  return new Video;
}

void Video::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Video::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 port = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint32, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Video::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 port = 1;
  if (has_port()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

}

int Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Video::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Video*>(&from));
}

void Video::MergeFrom(const Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
}

void Video::CopyFrom(const Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {

  return true;
}

void Video::Swap(Video* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Video::GetTypeName() const {
  return "orwell.messages.Video";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace orwell

// @@protoc_insertion_point(global_scope)
