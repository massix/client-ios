// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "controller.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace orwell {
namespace messages {

void protobuf_ShutdownFile_controller_2eproto() {
  delete Hello::default_instance_;
  delete Input::default_instance_;
  delete Input_Move::default_instance_;
  delete Input_Fire::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_controller_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_controller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Hello::default_instance_ = new Hello();
  Input::default_instance_ = new Input();
  Input_Move::default_instance_ = new Input_Move();
  Input_Fire::default_instance_ = new Input_Fire();
  Hello::default_instance_->InitAsDefaultInstance();
  Input::default_instance_->InitAsDefaultInstance();
  Input_Move::default_instance_->InitAsDefaultInstance();
  Input_Fire::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_controller_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_controller_2eproto_once_);
void protobuf_AddDesc_controller_2eproto() {
  ::google_public::protobuf::::google_public::protobuf::GoogleOnceInit(&protobuf_AddDesc_controller_2eproto_once_,
                 &protobuf_AddDesc_controller_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_controller_2eproto {
  StaticDescriptorInitializer_controller_2eproto() {
    protobuf_AddDesc_controller_2eproto();
  }
} static_descriptor_initializer_controller_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Hello::kNameFieldNumber;
const int Hello::kReadyFieldNumber;
const int Hello::kPortFieldNumber;
const int Hello::kIpFieldNumber;
#endif  // !_MSC_VER

Hello::Hello()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Hello::InitAsDefaultInstance() {
}

Hello::Hello(const Hello& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Hello::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ready_ = true;
  port_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hello::~Hello() {
  SharedDtor();
}

void Hello::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Hello& Hello::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_controller_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
#endif
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New() const {
  return new Hello;
}

void Hello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    ready_ = true;
    port_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Hello::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready;
        break;
      }

      // optional bool ready = 2 [default = true];
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::uint32, ::google_public::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required string ip = 4;
      case 4: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool ready = 2 [default = true];
  if (has_ready()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->ready(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

}

int Hello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool ready = 2 [default = true];
    if (has_ready()) {
      total_size += 1 + 1;
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Hello*>(&from));
}

void Hello::MergeFrom(const Hello& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
}

void Hello::CopyFrom(const Hello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void Hello::Swap(Hello* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ready_, other->ready_);
    std::swap(port_, other->port_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Hello::GetTypeName() const {
  return "orwell.messages.Hello";
}


// ===================================================================

#ifndef _MSC_VER
const int Input_Move::kLeftFieldNumber;
const int Input_Move::kRightFieldNumber;
#endif  // !_MSC_VER

Input_Move::Input_Move()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Input_Move::InitAsDefaultInstance() {
}

Input_Move::Input_Move(const Input_Move& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Input_Move::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input_Move::~Input_Move() {
  SharedDtor();
}

void Input_Move::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Input_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Input_Move& Input_Move::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_controller_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
#endif
  return *default_instance_;
}

Input_Move* Input_Move::default_instance_ = NULL;

Input_Move* Input_Move::New() const {
  return new Input_Move;
}

void Input_Move::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_ = 0;
    right_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Input_Move::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double left = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google_public::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_right;
        break;
      }

      // optional double right = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_right:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google_public::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input_Move::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional double left = 1;
  if (has_left()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteDouble(1, this->left(), output);
  }

  // optional double right = 2;
  if (has_right()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteDouble(2, this->right(), output);
  }

}

int Input_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double left = 1;
    if (has_left()) {
      total_size += 1 + 8;
    }

    // optional double right = 2;
    if (has_right()) {
      total_size += 1 + 8;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input_Move::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Input_Move*>(&from));
}

void Input_Move::MergeFrom(const Input_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
}

void Input_Move::CopyFrom(const Input_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_Move::IsInitialized() const {

  return true;
}

void Input_Move::Swap(Input_Move* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Input_Move::GetTypeName() const {
  return "orwell.messages.Input.Move";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Input_Fire::kWeapon1FieldNumber;
const int Input_Fire::kWeapon2FieldNumber;
#endif  // !_MSC_VER

Input_Fire::Input_Fire()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Input_Fire::InitAsDefaultInstance() {
}

Input_Fire::Input_Fire(const Input_Fire& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Input_Fire::SharedCtor() {
  _cached_size_ = 0;
  weapon1_ = false;
  weapon2_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input_Fire::~Input_Fire() {
  SharedDtor();
}

void Input_Fire::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Input_Fire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Input_Fire& Input_Fire::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_controller_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
#endif
  return *default_instance_;
}

Input_Fire* Input_Fire::default_instance_ = NULL;

Input_Fire* Input_Fire::New() const {
  return new Input_Fire;
}

void Input_Fire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weapon1_ = false;
    weapon2_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Input_Fire::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool weapon1 = 1;
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weapon1_)));
          set_has_weapon1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weapon2;
        break;
      }

      // optional bool weapon2 = 2;
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon2:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weapon2_)));
          set_has_weapon2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input_Fire::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional bool weapon1 = 1;
  if (has_weapon1()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(1, this->weapon1(), output);
  }

  // optional bool weapon2 = 2;
  if (has_weapon2()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->weapon2(), output);
  }

}

int Input_Fire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool weapon1 = 1;
    if (has_weapon1()) {
      total_size += 1 + 1;
    }

    // optional bool weapon2 = 2;
    if (has_weapon2()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input_Fire::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Input_Fire*>(&from));
}

void Input_Fire::MergeFrom(const Input_Fire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weapon1()) {
      set_weapon1(from.weapon1());
    }
    if (from.has_weapon2()) {
      set_weapon2(from.weapon2());
    }
  }
}

void Input_Fire::CopyFrom(const Input_Fire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_Fire::IsInitialized() const {

  return true;
}

void Input_Fire::Swap(Input_Fire* other) {
  if (other != this) {
    std::swap(weapon1_, other->weapon1_);
    std::swap(weapon2_, other->weapon2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Input_Fire::GetTypeName() const {
  return "orwell.messages.Input.Fire";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Input::kMoveFieldNumber;
const int Input::kFireFieldNumber;
#endif  // !_MSC_VER

Input::Input()
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
}

void Input::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  move_ = const_cast< ::orwell::messages::Input_Move*>(
      ::orwell::messages::Input_Move::internal_default_instance());
#else
  move_ = const_cast< ::orwell::messages::Input_Move*>(&::orwell::messages::Input_Move::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fire_ = const_cast< ::orwell::messages::Input_Fire*>(
      ::orwell::messages::Input_Fire::internal_default_instance());
#else
  fire_ = const_cast< ::orwell::messages::Input_Fire*>(&::orwell::messages::Input_Fire::default_instance());
#endif
}

Input::Input(const Input& from)
  : ::google_public::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Input::SharedCtor() {
  _cached_size_ = 0;
  move_ = NULL;
  fire_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Input::~Input() {
  SharedDtor();
}

void Input::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete move_;
    delete fire_;
  }
}

void Input::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Input& Input::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_controller_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_controller_2eproto();
#endif
  return *default_instance_;
}

Input* Input::default_instance_ = NULL;

Input* Input::New() const {
  return new Input;
}

void Input::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_move()) {
      if (move_ != NULL) move_->::orwell::messages::Input_Move::Clear();
    }
    if (has_fire()) {
      if (fire_ != NULL) fire_->::orwell::messages::Input_Fire::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Input::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google_public::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional group Move = 1 {
      case 1: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                1, input, mutable_move()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_fire;
        break;
      }

      // optional group Fire = 2 {
      case 2: {
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_fire:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, mutable_fire()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google_public::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Input::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // optional group Move = 1 {
  if (has_move()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteGroup(
      1, this->move(), output);
  }

  // optional group Fire = 2 {
  if (has_fire()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteGroup(
      2, this->fire(), output);
  }

}

int Input::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional group Move = 1 {
    if (has_move()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->move());
    }

    // optional group Fire = 2 {
    if (has_fire()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->fire());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Input::CheckTypeAndMergeFrom(
    const ::google_public::protobuf::MessageLite& from) {
  MergeFrom(*::google_public::protobuf::down_cast<const Input*>(&from));
}

void Input::MergeFrom(const Input& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_move()) {
      mutable_move()->::orwell::messages::Input_Move::MergeFrom(from.move());
    }
    if (from.has_fire()) {
      mutable_fire()->::orwell::messages::Input_Fire::MergeFrom(from.fire());
    }
  }
}

void Input::CopyFrom(const Input& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {

  return true;
}

void Input::Swap(Input* other) {
  if (other != this) {
    std::swap(move_, other->move_);
    std::swap(fire_, other->fire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Input::GetTypeName() const {
  return "orwell.messages.Input";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace orwell

// @@protoc_insertion_point(global_scope)
