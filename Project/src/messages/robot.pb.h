// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot.proto

#ifndef PROTOBUF_robot_2eproto__INCLUDED
#define PROTOBUF_robot_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace orwell {
namespace messages {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_robot_2eproto();
void protobuf_AssignDesc_robot_2eproto();
void protobuf_ShutdownFile_robot_2eproto();

class RobotState;
class RobotState_Move;
class Video;

// ===================================================================

class RobotState_Move : public ::google_public::protobuf::MessageLite {
 public:
  RobotState_Move();
  virtual ~RobotState_Move();

  RobotState_Move(const RobotState_Move& from);

  inline RobotState_Move& operator=(const RobotState_Move& from) {
    CopyFrom(from);
    return *this;
  }

  static const RobotState_Move& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RobotState_Move* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RobotState_Move* other);

  // implements Message ----------------------------------------------

  RobotState_Move* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const RobotState_Move& from);
  void MergeFrom(const RobotState_Move& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline double left() const;
  inline void set_left(double value);

  // optional double right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline double right() const;
  inline void set_right(double value);

  // @@protoc_insertion_point(class_scope:orwell.messages.RobotState.Move)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();

  double left_;
  double right_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_robot_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_robot_2eproto();
  #endif
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static RobotState_Move* default_instance_;
};
// -------------------------------------------------------------------

class RobotState : public ::google_public::protobuf::MessageLite {
 public:
  RobotState();
  virtual ~RobotState();

  RobotState(const RobotState& from);

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }

  static const RobotState& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RobotState* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RobotState* other);

  // implements Message ----------------------------------------------

  RobotState* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const RobotState& from);
  void MergeFrom(const RobotState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef RobotState_Move Move;

  // accessors -------------------------------------------------------

  // optional double life = 1;
  inline bool has_life() const;
  inline void clear_life();
  static const int kLifeFieldNumber = 1;
  inline double life() const;
  inline void set_life(double value);

  // optional group Move = 2 {
  inline bool has_move() const;
  inline void clear_move();
  static const int kMoveFieldNumber = 2;
  inline const ::orwell::messages::RobotState_Move& move() const;
  inline ::orwell::messages::RobotState_Move* mutable_move();
  inline ::orwell::messages::RobotState_Move* release_move();
  inline void set_allocated_move(::orwell::messages::RobotState_Move* move);

  // optional bool active = 3 [default = true];
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 3;
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:orwell.messages.RobotState)
 private:
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_move();
  inline void clear_has_move();
  inline void set_has_active();
  inline void clear_has_active();

  double life_;
  ::orwell::messages::RobotState_Move* move_;
  bool active_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_robot_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_robot_2eproto();
  #endif
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static RobotState* default_instance_;
};
// -------------------------------------------------------------------

class Video : public ::google_public::protobuf::MessageLite {
 public:
  Video();
  virtual ~Video();

  Video(const Video& from);

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }

  static const Video& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Video* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Video* other);

  // implements Message ----------------------------------------------

  Video* New() const;
  void CheckTypeAndMergeFrom(const ::google_public::protobuf::MessageLite& from);
  void CopyFrom(const Video& from);
  void MergeFrom(const Video& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google_public::protobuf::uint32 port() const;
  inline void set_port(::google_public::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:orwell.messages.Video)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::std::string* ip_;
  ::google_public::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google_public::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_robot_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_robot_2eproto();
  #endif
  friend void protobuf_AssignDesc_robot_2eproto();
  friend void protobuf_ShutdownFile_robot_2eproto();

  void InitAsDefaultInstance();
  static Video* default_instance_;
};
// ===================================================================


// ===================================================================

// RobotState_Move

// optional double left = 1;
inline bool RobotState_Move::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotState_Move::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotState_Move::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotState_Move::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline double RobotState_Move::left() const {
  return left_;
}
inline void RobotState_Move::set_left(double value) {
  set_has_left();
  left_ = value;
}

// optional double right = 2;
inline bool RobotState_Move::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotState_Move::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotState_Move::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotState_Move::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline double RobotState_Move::right() const {
  return right_;
}
inline void RobotState_Move::set_right(double value) {
  set_has_right();
  right_ = value;
}

// -------------------------------------------------------------------

// RobotState

// optional double life = 1;
inline bool RobotState::has_life() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotState::set_has_life() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotState::clear_has_life() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotState::clear_life() {
  life_ = 0;
  clear_has_life();
}
inline double RobotState::life() const {
  return life_;
}
inline void RobotState::set_life(double value) {
  set_has_life();
  life_ = value;
}

// optional group Move = 2 {
inline bool RobotState::has_move() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotState::set_has_move() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotState::clear_has_move() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotState::clear_move() {
  if (move_ != NULL) move_->::orwell::messages::RobotState_Move::Clear();
  clear_has_move();
}
inline const ::orwell::messages::RobotState_Move& RobotState::move() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return move_ != NULL ? *move_ : *default_instance().move_;
#else
  return move_ != NULL ? *move_ : *default_instance_->move_;
#endif
}
inline ::orwell::messages::RobotState_Move* RobotState::mutable_move() {
  set_has_move();
  if (move_ == NULL) move_ = new ::orwell::messages::RobotState_Move;
  return move_;
}
inline ::orwell::messages::RobotState_Move* RobotState::release_move() {
  clear_has_move();
  ::orwell::messages::RobotState_Move* temp = move_;
  move_ = NULL;
  return temp;
}
inline void RobotState::set_allocated_move(::orwell::messages::RobotState_Move* move) {
  delete move_;
  move_ = move;
  if (move) {
    set_has_move();
  } else {
    clear_has_move();
  }
}

// optional bool active = 3 [default = true];
inline bool RobotState::has_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotState::set_has_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotState::clear_has_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotState::clear_active() {
  active_ = true;
  clear_has_active();
}
inline bool RobotState::active() const {
  return active_;
}
inline void RobotState::set_active(bool value) {
  set_has_active();
  active_ = value;
}

// -------------------------------------------------------------------

// Video

// optional uint32 port = 1;
inline bool Video::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Video::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Video::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Video::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google_public::protobuf::uint32 Video::port() const {
  return port_;
}
inline void Video::set_port(::google_public::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string ip = 2;
inline bool Video::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Video::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Video::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Video::clear_ip() {
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Video::ip() const {
  return *ip_;
}
inline void Video::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Video::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Video::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Video::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Video::release_ip() {
  clear_has_ip();
  if (ip_ == &::google_public::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Video::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google_public::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace orwell

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robot_2eproto__INCLUDED
